print("Hello, World!")
"Hello world!"
a=1
b=2
a+b
data(crabs)
install.packages("MASS")
data(crabs)
library MASS
library(MASS)
data(crabs)
data(crabs)
pinga
"pinga"
"Esto es una pina"
"Esto es una pinga"
#hola
//hola
#pinga
"the pinguin"
install.packages("e1071")
library(e1071)
install.packages("faraway")
install.packages("caret")
base=read.table("datasetCangre.csv",sep=",",header=TRUE)
base
base=read.table("datasetCangre.csv",sep=",",header=TRUE)
base
base=read.table("datasetCangre.csv",sep=",",header=TRUE)
base
xyplot(CW~CL,base)
library(caret)
xyplot(CW~CL,base)
xyplot(CW~CL,base,pch=19)
xyplot(CW~CL,base)
xyplot(CW~CL,base,pch=19)
xyplot(CW~CL,base,groups=Especie,pch=19)
xyplot(CW~CL,base,groups=Especie,auto.key=TRUE,pch=19)
runif(2,1,10)
runif(10,1,10)
runif(1,1,10)
runif(1,1,10)
runif(1,1,10)
set.seed(123)
runif(2,1,10)
runif(2,1,10)
runif(2,1,10)
set.seed(carlos)
set.seed('carlos')
set.seed("carlos")
data(wolrdcup)
data("worldcup")
data(crabs)
library(farawa\)
library(faraway
)
data(wolrdcup)
library(faraway)
data("worldcup")
?woldcup
?worldcup
force(worldcup)
View(worldcup)
library(caret)
View(worldcup)
res <- subset(worldcup,Team = Argentina)
res <- subset(worldcup,Team == Argentina)
res <- subset(worldcup, worldcup$Team == Argentina)
res <- subset(worldcup, worldcup$Team == 'Argentina')
res <- subset(worldcup, Team == 'Argelia')
View(res)
View(worldcup)
res <- subset(worldcup, worldcup$Team == 'Argentina')
res <- subset(worldcup, Team == 'Algeria')
res <- subset(worldcup, Team == 'Argentina')
plot(Postiion)
plot(worldcup$Postiion)
plot(worldcup$Postiion)
summary(worldcup$Position)
plot(worldcup$Postiion)
fix(worldcup)
plot(worldcup$Postiion)
View(worldcup)
summary(worldcup)
plot(worldcup$Postiion)
x11()
View(worldcup)
library(faraway)
data("worldcup")
plot(worldcup$Postiion)
plot(worldcup$Postiion)
View(worldcup)
suummary(worldcup)
summary(worldcup)
barplot(table(worldcup$Position), main = "Distribution of Positions in World Cup Dataset",
xlab = "Position", ylab = "Frequency")
barplot(worldcup$Position)
plot(wolrdcup$Passes,main="Futbol")
plot(worldcup$Passes,main="Futbol")
barplot(table(worldcup$Position), main = "Distribution of Positions in World Cup Dataset",
xlab = "Position", ylab = "Frequency",col=rainbow(10))
hist(worldcup$Passes,main="Futbol",xlab="Pases",ylab="Frequencia",col=rainbow(10))
plot(worldcup$Time,worldcup$Passes,main="Futbol",xlab="Tiempo",ylab="Pases")
plot(worldcup$Time,worldcup$Passes,main="Futbol",xlab="Tiempo",ylab="Pases",col=rainbow(10))
plot(worldcup$Time,worldcup$Passes,main="Futbol",xlab="Tiempo",ylab="Pases",col=worldcup$Position)
plot(worldcup$Time,worldcup$Passes,main="Futbol",xlab="Tiempo",ylab="Pases",col=worldcup$Position,pch=19)
plot(worldcup$Time,worldcup$Passes,main="Futbol",xlab="Tiempo",ylab="Pases",col=worldcup$Position,pch=69,)
plot(worldcup$Time,worldcup$Passes,main="Futbol",xlab="Tiempo",ylab="Pases",col=worldcup$Position,pch=32,)
plot(worldcup$Time,worldcup$Passes,main="Futbol",xlab="Tiempo",ylab="Pases",col=worldcup$Position,pch=42,)
plot(worldcup$Time,worldcup$Passes,main="Futbol",xlab="Tiempo",ylab="Pases",col=worldcup$Position,pch=8,)
plot(worldcup$Time,worldcup$Passes,main="Futbol",xlab="Tiempo",ylab="Pases",col=worldcup$Position,pch=8,cex=4)
plot(worldcup$Time,worldcup$Passes,main="Futbol",xlab="Tiempo",ylab="Pases",col=worldcup$Position,pch=8,cex=1)
plot(worldcup$Time,worldcup$Passes,main="Futbol",xlab="Tiempo",ylab="Pases",col=worldcup$Position,pch=19,cex=1)
plot(worldcup$Time,worldcup$Passes,main="Futbol",xlab="Tiempo",ylab="Pases",col=worldcup$Position,pch=19,cex=2)
plot(worldcup$Time,worldcup$Passes,main="Futbol",xlab="Tiempo",ylab="Pases",col=worldcup$Position,pch=19,cex=1)
plot(worldcup$Time,worldcup$Passes,main="Futbol",xlab="Tiempo",ylab="Pases",col=worldcup$Position,pch='游뗽',cex=1)
plot(worldcup$Time,worldcup$Passes,main="Futbol",xlab="Tiempo",ylab="Pases",col=worldcup$Position,pch='游뗽',cex=4)
plot(worldcup$Time,worldcup$Passes,main="Futbol",xlab="Tiempo",ylab="Pases",col=worldcup$Position,pch='游뗽',cex=1)
identify(worldcup$Time,worldcup$Passes)
identify(worldcup$Time,worldcup$Passes,labels=row.names())
identify(worldcup$Time,worldcup$Passes,labels=row.names(worldcup))
plot(worldcup$Time,worldcup$Passes,main="Futbol",xlab="Tiempo",ylab="Pases",col=worldcup$Position,pch='游뗽',cex=1)
identify(worldcup$Time,worldcup$Passes,labels=row.names(worldcup))
library(caret)
xyplot(worldcup$Passes~worldcup$Time)
xyplot(worldcup$Passes~worldcup$Time,groups = worldcup$Position)
xyplot(worldcup$Passes~worldcup$Time,groups = worldcup$Position,legend())
xyplot(worldcup$Passes~worldcup$Time,groups = worldcup$Position,pch=19,auto.key = true)
xyplot(worldcup$Passes~worldcup$Time,groups = worldcup$Position,pch=19,auto.key = TRUE)
xyplot(worldcup$Passes~worldcup$Time,groups = worldcup$Position,pch=2,auto.key = TRUE)
library(MASS)
data(crabs)
force(crabs)
View(crabs)
crabs2<- subset(crabs,select=c(sp,FL,RW,CL,CW,BD))
?crabs2
?crabs
library(MASS)
data(crabs)
crabs$index=NULL
crabs$sex=NULL
summary(crabs)
str(crabs)
summary(crabs$sp)
hist(crabs$CL)
hist(crabs$CL, main="Cangrejos", col=rainbow(20))
plot(crabs$sp,col=c("blue","orange"))
#Cargo libreria
library(MASS)
#Cargo la data
data(crabs)
#Borro los datos innecesarios
crabs$index=NULL
crabs$sex=NULL
#Info del dataset
summary(crabs)
str(crabs)
summary(crabs$sp)
#Grafico
hist(crabs$CL)
hist(crabs$CL, main="Cangrejos", col=rainbow(20))
plot(crabs$sp,col=c("blue","orange"))
#Cargo libreria
library(MASS)
#Cargo la data
data(crabs)
#Borro los datos innecesarios
crabs$index=NULL
crabs$sex=NULL
#Info del dataset
summary(crabs)
str(crabs)
summary(crabs$sp)
#Grafico
hist(crabs$CL, main="Cangrejos", col=rainbow(20))
plot(crabs$sp,col=c("blue","orange"))
library(caret)
xyplot(LargoCaparazon~AnchoCaparazon,crabs)
xyplot(crabs$CL~crabs$CW,crabs)
xyplot(crabs$CL~crabs$CW,crabs,groups=sp,pch=19,auto.key=T)
dim(crabs)
xyplot(crabs$CL~crabs$CW,crabs,groups=sp, par.settings=list(superpose.symbol=list(pch=19),auto.key=T)
xyplot(crabs$CL~crabs$CW,crabs,groups=sp, par.settings=list(superpose.symbol=list(pch=19)),auto.key=T)
xyplot(crabs$CL~crabs$CW,crabs,groups=sp,xlabel='Hola', par.settings=list(superpose.symbol=list(pch=19)),auto.key=T)
xyplot(crabs$CL~crabs$CW,crabs,groups=sp,xlab='Hola', par.settings=list(superpose.symbol=list(pch=19)),auto.key=T)
xyplot(crabs$CL~crabs$CW,crabs,groups=sp,xlab='Ancho del caparaz칩n',ylab='Largo del caparaz칩n', par.settings=list(superpose.symbol=list(pch=19)),auto.key=T)
library(caret)
library(MASS)
library(rpart)
library(rpart.plot)
library(mlbench)
directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
#just use the setwd if not using rstudio
setwd(directory)
#EDA
data(Glass)
?Glass
dim(Glass)
head(Glass)
str(Glass$Type)
(Glass$Type)
summary(Glass$Type)
summary(Glass)
summary(Glass)
summary(Glass$Type)
summary(Glass)
Glass$Type=as.character(Glass$Type)
Glass$Type[Glass$Type=="1"]="VentanaTipo1"
Glass$Type[Glass$Type=="2"]="VentanaEdificio"
Glass$Type[Glass$Type=="3"]="VentanaAuto"
Glass$Type[Glass$Type=="5"]="Recipiente"
Glass$Type[Glass$Type=="6"]="Vajilla"
Glass$Type[Glass$Type=="7"]="FaroAuto"
Glass$Type=factor(Glass$Type)
names(Glass)[names(Glass)=="Type"]="TipoDeVidrio"
summary(Glass)
plot(Glass$TipoDeVidrio,main="Tipos de vidrio",col="blue")
plot(Glass$TipoDeVidrio,main="Gr치fico de barras de Guido",col="blue")
#Partition
setSeed(40397224)
#Partition
set.seed(40397224)
partition=createDataPartition(y=Zoo$legs,p=0.75,list=FALSE)
entreno=Zoo[partition,]
summary(entreno)
head(entreno)
summary(testeo)
head(testeo)
entreno=Glass[partition,]
testeo=Glass[-partition,]
summary(entreno)
entreno=Glass[partition,]
partition=createDataPartition(y=Zoo$legs,p=0.75,list=FALSE)
partition=createDataPartition(y=Glass$TipoDeVidrio,p=0.75,list=FALSE)
entreno=Glass[partition,]
testeo=Glass[-partition,]
summary(entreno)
head(entreno)
summary(testeo)
head(testeo)
source("~/GitHub/AI-Certification-ITBA/Code/Ej1b/Lambertucci.R", echo=TRUE)
dim(Glass);dim(entreno);dim(testeo)
# decision tree
arbol=rpart(TipoDeVidrio~.,entreno,method="class")
rpart.plot(arbol,extra=1,type=5,cex=0.8)
sum(arbol$frame$var == "<leaf>")
#es FaroAuto si el contenido de Bario es mayor igual a 0.4
pred=predict(arbol,testeo,type="class") confusionMatrix(pred,testeo$TipoDeVidrio)
#es FaroAuto si el contenido de Bario es mayor igual a 0.4
pred=predict(arbol,testeo,type="class")
confusionMatrix(pred,testeo$TipoDeVidrio)
diag(confusionMatrix())
diag(confusionMatrix(pred,testeo$TipoDeVidrio))
partition=createDataPartition(y=Glass$TipoDeVidrio,p=0.75,list=FALSE)
entreno=Glass[partition,]
testeo=Glass[-partition,]
# decision tree
arbol=rpart(TipoDeVidrio~.,entreno,method="class")
rpart.plot(arbol,extra=1,type=5,cex=0.8)
sum(arbol$frame$var == "<leaf>")
#es FaroAuto si el contenido de Bario es mayor igual a 0.4
pred=predict(arbol,testeo,type="class")
confusionMatrix(pred,testeo$TipoDeVidrio)
vidrioAsignado=Glass(24,)
vidrioAsignado=Glass[24,]
vidrioAsignado
predict(arbol,vidrioAsignado,type="class")
#Optimizacion
arbol$control
arbolGrande=rpart(TipoDeVidrio~.,entreno,method="class",cp=0,minsplit=0)
rpart.plot(arbolGrande,extra=1,type=5,cex=0.6)
plotcp(arbolGrande)
source("~/GitHub/AI-Certification-ITBA/Code/Ej1b/Lambertucci.R", echo=TRUE)
pred=predict(arbolPodado,testeo,type="class")
confusionMatrix(pred,testeo$TipoDeVidrio)
rpart.plot(arbolPodado,extra=1,type=5,cex=0.6)
summary(Glass)
dim(Glass)
?Glass
plot(Glass$TipoDeVidrio,main="Gr치fico de barras de Guido",col="blue")
head(entreno)
summary(entreno)
head(testeo)
summary(testeo)
dim(entreno)
dim(testeo)
table(Glass$TipoDeVidrio);table(entreno$TipoDeVidrio);table(testeo$TipoDeVidrio)
table(Glass$TipoDeVidrio);
table(entreno$TipoDeVidrio);
table(testeo$TipoDeVidrio)
#Partition
set.seed(40397224)
partition=createDataPartition(y=Glass$TipoDeVidrio,p=0.75,list=FALSE)
entreno=Glass[partition,]
testeo=Glass[-partition,]
summary(entreno)
head(entreno)
summary(testeo)
head(testeo)
dim(Glass);dim(entreno);dim(testeo)
# decision tree
arbol=rpart(TipoDeVidrio~.,entreno,method="class")
rpart.plot(arbol,extra=1,type=5,cex=0.8)
library(caret)
library(MASS)
library(rpart)
library(rpart.plot)
library(mlbench)
directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
#just use the setwd if not using rstudio
setwd(directory)
#EDA
data(Glass)
dim(Glass)
?Glass
summary(Glass)
summary(Glass$Type)
Glass$Type=as.character(Glass$Type)
Glass$Type[Glass$Type=="1"]="VentanaTipo1"
Glass$Type[Glass$Type=="2"]="VentanaEdificio"
Glass$Type[Glass$Type=="3"]="VentanaAuto"
Glass$Type[Glass$Type=="5"]="Recipiente"
Glass$Type[Glass$Type=="6"]="Vajilla"
Glass$Type[Glass$Type=="7"]="FaroAuto"
Glass$Type=factor(Glass$Type)
names(Glass)[names(Glass)=="Type"]="TipoDeVidrio"
summary(Glass)
plot(Glass$TipoDeVidrio,main="Gr치fico de barras de Guido",col="blue")
#Partition
set.seed(40397224)
partition=createDataPartition(y=Glass$TipoDeVidrio,p=0.75,list=FALSE)
entreno=Glass[partition,]
testeo=Glass[-partition,]
summary(entreno)
head(entreno)
summary(testeo)
head(testeo)
dim(Glass);dim(entreno);dim(testeo)
# decision tree
arbol=rpart(TipoDeVidrio~.,entreno,method="class")
rpart.plot(arbol,extra=1,type=5,cex=0.8)
sum(arbol$frame$var == "<leaf>")
#es FaroAuto si el contenido de Bario es mayor igual a 0.4
pred=predict(arbol,testeo,type="class")
confusionMatrix(pred,testeo$TipoDeVidrio)
dim(Glass)
dim(testeo)
dim(entreno)
vidrioAsignado=Glass[24,]
vidrioAsignado
pred=predict(arbolPodado,testeo,type="class")
#es FaroAuto si el contenido de Bario es mayor igual a 0.4
pred=predict(arbol,testeo,type="class")
confusionMatrix(pred,testeo$TipoDeVidrio)
vidrioAsignado=Glass[24,]
vidrioAsignado
predict(arbol,vidrioAsignado,type="class")
#Optimizacion
arbol$control
arbolGrande=rpart(TipoDeVidrio~.,entreno,method="class",cp=0,minsplit=0)
rpart.plot(arbolGrande,extra=1,type=5,cex=0.6)
rpart.plot(arbolGrande,extra=1,type=5,cex=0.2)
rpart.plot(arbolGrande,extra=1,type=5,cex=0.4)
rpart.plot(arbolGrande,extra=1,type=5)
6
rpart.plot(arbolGrande,extra=1,type=5,cex=0.6)
prp(arbolGrande,extra=1,type=5,cex=0.6)
rpart.plot
rpart.plot(arbolGrande,extra=1,type=5,cex=0.6)
rpart.plot(arbolGrande,extra=2,type=5,cex=0.6)
1
rpart.plot(arbolGrande,extra=1,type=5,cex=0.6)
rpart.plot(arbolGrande,extra=1,type=5,cex=0.4)
plotcp(arbolGrande)
directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
#just use the setwd if not using rstudio
setwd(directory)
#EDA
data(Glass)
dim(Glass)
?Glass
summary(Glass)
summary(Glass$Type)
Glass$Type=as.character(Glass$Type)
Glass$Type[Glass$Type=="1"]="VentanaTipo1"
Glass$Type[Glass$Type=="2"]="VentanaEdificio"
Glass$Type[Glass$Type=="3"]="VentanaAuto"
Glass$Type[Glass$Type=="5"]="Recipiente"
Glass$Type[Glass$Type=="6"]="Vajilla"
Glass$Type[Glass$Type=="7"]="FaroAuto"
Glass$Type=factor(Glass$Type)
names(Glass)[names(Glass)=="Type"]="TipoDeVidrio"
summary(Glass)
plot(Glass$TipoDeVidrio,main="Gr치fico de barras de Guido",col="blue")
#Partition
set.seed(40397224)
partition=createDataPartition(y=Glass$TipoDeVidrio,p=0.75,list=FALSE)
entreno=Glass[partition,]
testeo=Glass[-partition,]
summary(entreno)
head(entreno)
summary(testeo)
head(testeo)
dim(Glass);dim(entreno);dim(testeo)
# decision tree
arbol=rpart(TipoDeVidrio~.,entreno,method="class")
rpart.plot(arbol,extra=1,type=5,cex=0.8)
sum(arbol$frame$var == "<leaf>")
#es FaroAuto si el contenido de Bario es mayor igual a 0.4
pred=predict(arbol,testeo,type="class")
confusionMatrix(pred,testeo$TipoDeVidrio)
vidrioAsignado=Glass[24,]
vidrioAsignado
predict(arbol,vidrioAsignado,type="class")
#Optimizacion
arbol$control
arbolGrande=rpart(TipoDeVidrio~.,entreno,method="class",cp=0,minsplit=0)
rpart.plot(arbolGrande,extra=1,type=5,cex=0.4)
plotcp(arbolGrande)
arbolPodado=prune(arbolGrande,cp=0.016)
pred=predict(arbolPodado,testeo,type="class")
confusionMatrix(pred,testeo$TipoDeVidrio)
rpart.plot(arbolPodado,extra=1,type=5,cex=0.6)
# decision tree
arbol=rpart(TipoDeVidrio~.,entreno,method="class")
#es FaroAuto si el contenido de Bario es mayor igual a 0.4
pred=predict(arbol,testeo,type="class")
confusionMatrix(pred,testeo$TipoDeVidrio)
